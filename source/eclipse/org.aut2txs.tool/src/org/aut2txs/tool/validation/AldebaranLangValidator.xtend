/*
 * generated by Xtext 2.18.0.M3
 */
package org.aut2txs.tool.validation

import org.eclipse.xtext.validation.Check
import org.aut2txs.tool.aldebaranLang.Transition
import org.aut2txs.tool.aldebaranLang.File
import org.aut2txs.tool.aldebaranLang.AldebaranLangPackage
import org.eclipse.xtext.EcoreUtil2

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class AldebaranLangValidator extends AbstractAldebaranLangValidator {
	@Check
	def checkFile(File file) {
		if (file.firstState != 0) {
			error('First state must be 0!', file, AldebaranLangPackage.Literals.FILE__FIRST_STATE, 0, null);
		}
		
		if (file.transitionCount != file.transitions.size) {
			error(file.transitionCount + ' transitions expected, but ' + file.transitions.size + ' found!', file, AldebaranLangPackage.Literals.FILE__TRANSITION_COUNT, 0, null);
		}
	}
	
	@Check
	def checkTransition(Transition transition) {
		var file = EcoreUtil2.getContainerOfType(transition, File);
		
		if (transition.startState < 0 || transition.startState >= file.stateCount) {
			error('Start state in range [0..' + (file.stateCount - 1) + '] expected, but ' + transition.startState + ' found!', transition, AldebaranLangPackage.Literals.TRANSITION__START_STATE, 0, null);
		}
		
		if (transition.endState < 0 || transition.endState >= file.stateCount) {
			error('End state in range [0..' + (file.stateCount - 1) + '] expected, but ' + transition.endState + ' found!', transition, AldebaranLangPackage.Literals.TRANSITION__END_STATE, 0, null);
		}
	}
}
